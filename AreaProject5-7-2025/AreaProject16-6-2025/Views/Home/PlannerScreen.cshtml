


@*  PlannerScreen view

@* ================================================== *@
 

 @using System.Text.Json
@{
    ViewData["Title"] = "Controller View";
    var TracLatitudeCoordinate = ViewBag.TracLatitudeCoordinate ?? 30.177;
    var TracLongitudeCoordinate = ViewBag.TracLongitudeCoordinate ?? 31.44;

    var LatitudeDecimalCairoAirport = ViewBag.LatitudeDecimal;
    var LongitudeDecimalCairoAirport = ViewBag.LongitudeDecimal;

    var SignonUserName = ViewBag.SelectedUser ?? "Unknown User";


}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/styles.css" />

</head>

<body>
    <div class="container custom-container">
        <div class="main-card">
            @* <h3>Controller View</h3>  <hr /> *@
            <div class="d-flex gap-2 flex-wrap mb-3">
                <div style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <strong>Area</strong>
                </div>

                <div style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <strong>
                        Planner
                    </strong>
                </div>

                <div id="dateTimeInfo" style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <div id="currentDate"></div>  <div id="currentTime">  </div>  <span id="elapsedTime"></span>
                </div>

                <div class="mt-0 d-flex flex-wrap gap-2">
                    <div id="latlongDisplay" style="background-color:cadetblue"
                         class="btn-aqua align-content-center">
                        Lat:31°8'23"N | Lng:31°21'13"E
                    </div>
                </div>
                <button id="toggleVelocityButton" class="btn-aqua">VEL</button>

                <div class="dropdown">
                    <button id="histButton" class="btn-aqua dropdown-toggle" data-bs-toggle="dropdown">
                        HIST:
                    </button>
                    <ul class="dropdown-menu" id="histDropdown">
                        <li><button class="dropdown-item" onclick="selectHist('None')">None</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('1')">1</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('2')">2</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('3')">3</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('4')">4</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('5')">5</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('10')">10</button></li>
                    </ul>
                </div>

                <div class="dropdown">
                    <button id="labelToggle" class="btn-aqua dropdown-toggle">  Label  </button>
                    <ul class="dropdown-menu" id="labelMenu">
                        <li><button class="dropdown-item" onclick="selectlabel('Normal')">Normal</button></li>
                        <li class="dropdown-submenu">
                            <button class="dropdown-item dropdown-toggle" onclick="openCustomizedDropdown()">Customized</button>
                            <ul class="dropdown-menu" id="customizedOptions" style="display: none; padding: 10px;">
                                <li> <input type="checkbox" id="chkSSR" onchange="updateCustomized()"> SSR Code  </li>
                                <li>  <input type="checkbox" id="chkSpeed" onchange="updateCustomized()"> Track Speed  </li>
                                <li> <input type="checkbox" id="chkAltitude" onchange="updateCustomized()"> Track Altitude  </li>
                            </ul>
                        </li>
                    </ul>
                </div>

                <div class="dropdown">
                    <button id="trackButton" class="btn-aqua dropdown-toggle" data-bs-toggle="dropdown">
                        Choose Scenario:
                    </button>
                    <ul class="dropdown-menu" id="trackDropdown">
                        <li><button class="dropdown-item" onclick="selectSenario('ScenarioNumber1')">Scenario Number 1</button></li>
                        <li><button class="dropdown-item" onclick="selectSenario('ScenarioNumber2')">Scenario Number 2</button></li>
                    </ul>
                </div>
            </div>

            <div id="map"></div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <p class="mb-1 badge badge-soft">Sign on : <strong>@SignonUserName</strong></p>
                <div class="dropdown">
                    <button id="mapFeatureslabelToggle" class="btn-aqua dropdown-toggle"> Map Features  </button>
                    <ul class="dropdown-menu" id="mapFeatureslabelMenu">
                        <li><button class="dropdown-item" onclick="selectmapFeatureslabel('CairoTMA')">Cairo TMA</button></li>
                        <li class="dropdown-submenu">
                            <button class="dropdown-item dropdown-toggle" onclick="openCustomizedmapFeaturesDropdown()">Geographical Features </button>
                            <ul class="dropdown-menu" id="customizedmapFeaturesOptions" style="display: none; padding: 10px;">
                                <li>  <input type="checkbox" id="redSea" onchange="updatemapFeaturesCustomized('RedSea')"> Red Sea  </li>
                                <li>  <input type="checkbox" id="mediterranean" onchange="updatemapFeaturesCustomized('MedSea')">   Mediterranean  </li>
                                <li> <input type="checkbox" id="elNile" onchange="updatemapFeaturesCustomized('ElNile')">   El Nile   </li>
                            </ul>
                        </li>
                    </ul>
                </div>
                @for (int i = 3; i <= 9; i++)
                {
                    <span class="badge badge-soft">CL @i</span>
                }
            </div>
        </div>
    </div>

    @section Scripts {
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

        <script>
            let map, marker, histMarkers = [], historyMarker = null; let medSeaLayer;
            let redSeaLayer; let nileLayer; let showVelocity = false; let lastTracksData;
            let startTime; let labelMode = "Normal"; let elapsedInterval;
            let customizedOptions = { ssr: false, speed: false, altitude: false };
            let customizedmapFeaturesOptions =
                { redsea: false, mediterranean: false, elNile: false }; let checkZoomFirstTime = true;
            var planeMarkers = {}; var trackPaths = {}; var intervalId = null;


            document.addEventListener("DOMContentLoaded", () => {
                initializeMap(); setInterval(updateDateTime, 1000);

                var histButton = document.getElementById('histButton');
                var histDropdown = new bootstrap.Dropdown(histButton);
                histButton.addEventListener('click', function (e) {
                    e.preventDefault(); histDropdown.toggle();
                });

                var trackButton = document.getElementById('trackButton');
                var trackDropdown = new bootstrap.Dropdown(trackButton);
                trackButton.addEventListener('click', function (e) {
                    e.preventDefault(); trackDropdown.toggle();
                });

                var labelButton = document.getElementById('labelToggle');
                var labelDropdown = new bootstrap.Dropdown(labelButton);
                labelButton.addEventListener('click', function (e) {
                    e.preventDefault(); labelDropdown.toggle();
                });

                var mapFeatureslabelButton = document.getElementById('mapFeatureslabelToggle');
                var mapFeatureslabelDropdown = new bootstrap.Dropdown(mapFeatureslabelButton);
                mapFeatureslabelButton.addEventListener('click', function (e) {
                    e.preventDefault(); mapFeatureslabelDropdown.toggle();
                });

                map.on('mousemove', function (e) {
                    const latDMS = convertToDMS(e.latlng.lat, true);
                    const lngDMS = convertToDMS(e.latlng.lng, false);
                    document.getElementById("latlongDisplay").innerHTML = `Lat:${latDMS} <br/> Lng:${lngDMS}`;
                });

                // document.getElementById("toggleVelocityButton").addEventListener("click", function () {
                //     showVelocity = !showVelocity;
                //     marker.setIcon(createPlaneIcon(showVelocity));
                // });
                document.getElementById("toggleVelocityButton").addEventListener("click", function () {
                    showVelocity = !showVelocity;

                    // حدّث كل أيقونات الطائرات
                    Object.values(planeMarkers).forEach(marker => {
                        marker.setIcon(createPlaneIcon(showVelocity));
                    });
                });


            });

            // =======------------------------- 0-Initialize Map Region -------------------------------------------------------------====
            function initializeMap() {
                var lat = @JsonSerializer.Serialize(TracLatitudeCoordinate);
                var lng = @JsonSerializer.Serialize(TracLongitudeCoordinate);

                map = L.map('map').setView([lat, lng], 13);
                L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);

                marker = L.marker([lat, lng], {
                    icon: createPlaneIcon(showVelocity)
                }).addTo(map).bindPopup(createPopupContent(labelMode, {
                    number: 1,
                    ssr: "Track Number One",
                    speed: 32,
                    altitude: 10000,
                    heading: 250
                }));

                marker.on('click', () => {
                    showVelocity = !showVelocity;
                    marker.setIcon(createPlaneIcon(showVelocity));
                });
            }

            // =======------------------------- 1-Data Time Region -------------------------------------------------------------====
            function updateDateTime() {
                const now = new Date();
                document.getElementById("currentDate").textContent = `Date:${now.toISOString().split('T')[0]}`;
                document.getElementById("currentTime").textContent = `UTC:${now.toUTCString().split(' ')[4]}`;
                const elapsedMs = now - startTime; const sec = Math.floor(elapsedMs / 1000) % 60;
                const min = Math.floor(elapsedMs / 1000 / 60);
            }
            function startElapsedTime() {
                elapsedInterval = setInterval(() => {
                    const now = new Date();
                    const elapsedMs = now - startTime;
                    const seconds = Math.floor(elapsedMs / 1000) % 60;
                    const minutes = Math.floor(elapsedMs / 1000 / 60);

                    document.getElementById("elapsedTime").textContent =
                        `Elapsed Time: ${minutes}m ${seconds}s`;
                }, 1000); // كل ثانية
            }

            // =======------------------------- 2-lat lng Region -------------------------------------------------------------====
            function convertToDMS(degree, isLat) {
                const dir = degree >= 0 ? (isLat ? "N" : "E") : (isLat ? "S" : "W");
                const absDeg = Math.abs(degree); const deg = Math.floor(absDeg);
                const minFloat = (absDeg - deg) * 60; const min = Math.floor(minFloat);
                const sec = ((minFloat - min) * 60).toFixed(0);

                return `${deg}°${min}'${sec}" ${dir}`;
            }

            // =======------------------------- 3-VEL Region -------------------------------------------------------------====
            function createPlaneIcon(showVel) {
                return L.divIcon({
                    className: 'plane-icon',
                    html: `<svg width="36" height="54">
                                                                                                                                                                                                                                                                                                                                                                                                                <circle cx="18" cy="18" r="16.2" stroke="#FF8C00" stroke-width="2" fill="none"/>
                                                                                                                                                                                                                                                                                                                                                                                                                <line x1="18" y1="2" x2="18" y2="36" stroke="#FF8C00" stroke-width="2"/>
                                                                                                                                                                                                                                                                                                                                                                                                                <line x1="2" y1="18" x2="34" y2="18" stroke="#FF8C00" stroke-width="2"/>
                                                                                                                                                                                                                                                                                                                                                                                                                ${showVel ? '<line x1="18" y1="0" x2="18" y2="90" stroke="#FF8C00" stroke-width="2" /><polygon points="16.2,9 19.8,9 18,12" fill="#FF8C00" />' : ''}
                                                                                                                                                                                                                                                                                                                                                                                                              </svg>`
                });
            }

            // =======------------------------- 4-Hist Region -------------------------------------------------------------====
            function selectHist(value) {
                document.getElementById("histButton").textContent = `HIST: ${value}`;
                histMarkers.forEach(m => map.removeLayer(m));
                histMarkers = [];

                if (value === 'None') return;
                const count = parseInt(value);

                if (!lastTracksData || lastTracksData.length === 0) return;

                lastTracksData.forEach(track => {
                    if (track.trackTransactions && track.trackTransactions.length > 0) {
                        const transactions = track.trackTransactions;
                        const startIndex = Math.max(0, transactions.length - count);

                        for (let i = startIndex; i < transactions.length; i++) {
                            const tx = transactions[i];
                            const lat = tx.trackLatitude;
                            const lng = tx.trackLongitude;

                            const marker = L.circleMarker([lat, lng], {
                                radius: 3,
                                color: 'red',
                                fillColor: 'red',
                                fillOpacity: 0.8
                            }).addTo(map);
                            histMarkers.push(marker);
                        }
                    }
                });
            }

            // =======------------------------- 5-Label Region -------------------------------------------------------------====
            function selectlabel(value) {
                labelMode = value;
                if (value === 'Normal') {
                    const customizedDivw = document.getElementById('customizedOptions');
                    customizedDivw.style.display = 'none';

                    // الغي تفعيل الـ checkboxes
                    document.getElementById('chkSSR').checked = false;
                    document.getElementById('chkSpeed').checked = false;
                    document.getElementById('chkAltitude').checked = false;

                    // حدث حالة الخيارات
                    customizedOptions = { ssr: false, speed: false, altitude: false };
                }

                // تحديث جميع الـ popups
                Object.entries(planeMarkers).forEach(([id, marker]) => {
                    const track = lastTracksData.find(t => t.Id == id);
                    if (!track || !track.trackTransactions.length) return;

                    const latest = track.trackTransactions[track.trackTransactions.length - 1];
                    const data = {
                        number: track.Id,
                        ssr: (track.Name && track.Name.trim() !== "") ? track.Name : "N/A",
                        speed: latest.trackspeedNew,
                        altitude: latest.trackAltitude,
                        heading: latest.trackHeading
                    };
                    marker.setPopupContent(createPopupContent(labelMode, data));
                    // updatePopup(marker, data);
                });
            }
            function updatePopup(marker, data) {
                const popupContent = createPopupContent(labelMode, data);
                marker.setPopupContent(popupContent);
            }
            function createPopupContent(labelMode, data) {
                if (labelMode === "Customized") {
                    let content = "✈️ ";
                    if (customizedOptions.ssr) {
                        content += `<br>SSR Code: ${data.ssr}`;
                    }
                    if (customizedOptions.speed) {
                        content += `<br>Speed: ${data.speed} knots`;
                    }
                    if (customizedOptions.altitude) {
                        content += `<br>Altitude: ${data.altitude} ft`;
                    }

                    // لو مفيش حاجة متعلم عليها
                    if (!customizedOptions.ssr && !customizedOptions.speed && !customizedOptions.altitude) {
                        content += "<br>No Data Selected.";
                    }

                    return content;
                }

                // لو مش Customized
                switch (labelMode) {
                    case "Normal":
                        return `✈️ طائرة رقم ${data.number}<br> Track SSR = ${data.ssr}<br> Track Altitude: ${data.altitude}<br> Track Speed: ${data.speed}`;

                    case "SSR Code":
                    case "Option 1":
                        return `✈️ SSR Code: ${data.ssr}`;

                    case "Speed":
                    case "Option 2":
                        return `✈️ Speed: ${data.speed}`;

                    case "Altitude":
                    case "Option 3":
                        return `✈️ Altitude: ${data.altitude} ft`;

                    case "Heading":
                    case "Option 4":
                        return `✈️ Heading: ${data.heading}°`;

                    default:
                        return `✈️ طائرة`;
                }
            }
            function buildPopupData(track) {
                const latest = track.trackTransactions[track.trackTransactions.length - 1];
                return {
                    number: track.Id,
                    ssr: track.Name || "N/A",
                    speed: latest.trackspeedNew,
                    altitude: latest.trackAltitude,
                    heading: latest.trackHeading
                };
            }
            function updateCustomized() {
                customizedOptions.ssr = document.getElementById('chkSSR').checked;
                customizedOptions.speed = document.getElementById('chkSpeed').checked;
                customizedOptions.altitude = document.getElementById('chkAltitude').checked;

                // تحديث كل الـ popups بناءً على الإعدادات الجديدة
                Object.entries(planeMarkers).forEach(([id, marker]) => {
                    const track = lastTracksData?.find(t => t.Id == id);
                    if (!track || !track.trackTransactions.length) return;

                    const latest = track.trackTransactions[track.trackTransactions.length - 1];
                    const data = {
                        number: track.Id,
                        ssr: track.Name || "N/A",
                        speed: latest.trackspeedNew,
                        altitude: latest.altitude,
                        heading: latest.trackLongitude
                    };
                    updatePopup(marker, data);
                });
            }
            function toggleCustomized() {
                const customizedDiv = document.getElementById('customizedOptions');
                if (customizedDiv.style.display === 'none') {
                    customizedDiv.style.display = 'block';
                } else {
                    customizedDiv.style.display = 'none';
                }
                labelMode = "Customized";
            }
            function openCustomizedDropdown() {
                const customizedDiv = document.getElementById('customizedOptions');
                if (customizedDiv.style.display === 'none') {
                    customizedDiv.style.display = 'block';
                }
                const dropdownMenu = document.getElementById('labelToggle').nextElementSibling;  // تحديد الـ dropdown التابع للـ Label
                const bootstrapDropdown = new bootstrap.Dropdown(dropdownMenu);
                bootstrapDropdown.show();
                labelMode = "Customized";
            }

            // =======------------------------- 6-Choose Scenario Region -------------------------------------------------------------====
            function selectSenario(value) {
                document.getElementById("trackButton").textContent = `${value}`;
                if (intervalId) {
                    clearInterval(intervalId);
                    intervalId = null;
                }

                if (value === 'None') {
                    // ممكن تمسح كل الماركرات من الخريطة هنا كمان
                    Object.values(planeMarkers).forEach(marker => map.removeLayer(marker));
                    Object.values(trackPaths).forEach(pathArray => pathArray.forEach(m => map.removeLayer(m)));
                    planeMarkers = {};
                    trackPaths = {};
                    return;
                }

                if (value === 'ScenarioNumber1') {
                    startTime = new Date();
                    function updateTrackTransactions() {
                        fetch('/api/tracksApiJson/latest')
                            .then(response => response.json())
                            .then(tracksJson => {
                                lastTracksData = tracksJson; // استخدمه لاحقًا لتحديث البوب أب

                                tracksJson.forEach(track => {
                                    // console.log(`🛩️ Track ID: ${track.Id}`, track.trackTransactions.map(t => [t.trackLatitude, t.trackLongitude]));

                                    if (track.trackTransactions && track.trackTransactions.length > 0) {
                                        var transactions = track.trackTransactions;
                                        var latestTransaction = transactions[transactions.length - 1];

                                        if (trackPaths[track.Id]) {
                                            trackPaths[track.Id].forEach(marker => map.removeLayer(marker));
                                        }
                                        trackPaths[track.Id] = [];

                                        // for (let i = 0; i < transactions.length - 1; i++) {
                                        //     var redMarker = L.circleMarker([transactions[i].trackLatitude, transactions[i].trackLongitude], {
                                        //         radius: 1,
                                        //         color: 'blue',
                                        //         fillColor: 'red',
                                        //         fillOpacity: 1
                                        //     }).addTo(map);
                                        //     trackPaths[track.Id].push(redMarker);
                                        // }
                                        if (planeMarkers[track.Id]) {
                                            planeMarkers[track.Id].setLatLng([latestTransaction.trackLatitude, latestTransaction.trackLongitude]);

                                            const data = {
                                                number: track.Id,
                                                ssr: track.Name || "N/A",
                                                speed: latestTransaction.trackspeedNew,
                                                altitude: latestTransaction.altitude,
                                                heading: latestTransaction.trackLongitude
                                            };
                                            const popupContent = createPopupContent(labelMode, data);
                                            planeMarkers[track.Id].setPopupContent(popupContent); // ✅ تحديث المحتوى هنا
                                        }

                                        else {
            //                                 var planeIcon = L.divIcon({
            //                                     className: 'custom-plane-icon',
            //                                     html: `<svg width="28.8" height="43.2">
            //     <circle cx="14.4" cy="14.4" r="12.96" stroke="#FF8C00" stroke-width="2" fill="none"/>
            //     <line x1="14.4" y1="1.6" x2="14.4" y2="28.8" stroke="#FF8C00" stroke-width="2"/>
            //     <line x1="1.6" y1="14.4" x2="27.2" y2="14.4" stroke="#FF8C00" stroke-width="2"/>
            // </svg>`

            //                                 });
                                            var planeIcon = createPlaneIcon(showVelocity);

                                            const data = {
                                                number: track.Id,
                                                ssr: track.Name || "N/A",
                                                speed: latestTransaction.trackspeedNew,
                                                altitude: latestTransaction.trackAltitude,
                                                heading: latestTransaction.trackHeading
                                            };
                                            const popupContent = createPopupContent(labelMode, data);

                                            var planeMarker = L.marker([latestTransaction.trackLatitude, latestTransaction.trackLongitude], { icon: planeIcon })
                                                .addTo(map)
                                                .bindPopup(popupContent);

                                            planeMarkers[track.Id] = planeMarker;

                                        }
                                    } else {
                                        console.log(`❌ لا توجد بيانات لحركة الطائرة للمسار: ${track.Id}`);
                                    }
                                });
                                if (checkZoomFirstTime) {

                                    let firstTrackLat = tracksJson[0].trackTransactions[0].trackLatitude,
                                        firstTrackLng = tracksJson[0].trackTransactions[0].trackLongitude;
                                    map.setView([firstTrackLat, firstTrackLng], 13);
                                    checkZoomFirstTime = false;
                                }

                                if (true) {
                                    startElapsedTime();
                                }

                            })
                            .catch(error => console.error("❌ خطأ في تحميل بيانات المسارات:", error));
                    }

                    intervalId = setInterval(updateTrackTransactions, 1000);
                    updateTrackTransactions();
                }
            }

            // =======------------------------- 7-Map Features Region -------------------------------------------------------------====
            function selectmapFeatureslabel(value) {
                labelMode = value;
                document.getElementById("mapFeatureslabelToggle").innerText = `Map: ${value}`;
                if (labelMode === 'CairoTMA') {
                    var LatitudeDecimalCairoAirport = @JsonSerializer.Serialize(30.114);
                    var LongitudeDecimalCairoAirport = @JsonSerializer.Serialize(31.44);

                    var airportIcon = L.icon({
                        iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                        iconSize: [32, 32],
                        iconAnchor: [16, 16]
                    });
                    let latConvertDiplayStructure = LatitudeDecimalCairoAirport.toFixed(1); // النتيجة هتكون "30.1" كنص
                    let lngConvertDiplayStructure = LongitudeDecimalCairoAirport.toFixed(1); // مثلاً "31.2"

                    L.marker([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], { icon: airportIcon })
                        .addTo(map)
                        .bindPopup(`<b> </b>
                                                                                                                                                                                                                                                                                                                                                                                                       data base مطار القاهره من ال   <br> 📍 الإحداثيات: (${latConvertDiplayStructure}, ${lngConvertDiplayStructure})`);
                    map.setView([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], 13);
                }

                else {
                    updatemapFeaturesPopup();
                }
            }
            function createmapfeaturePopupContent(labelMode) {
                value = labelMode;

                if (value === "CairoTMA") {

                    var LatitudeDecimalCairoAirport = @JsonSerializer.Serialize(@LatitudeDecimalCairoAirport);
                    var LongitudeDecimalCairoAirport = @JsonSerializer.Serialize(LongitudeDecimalCairoAirport);

                    var airportIcon = L.icon({
                        iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                        iconSize: [32, 32],
                        iconAnchor: [16, 16]
                    });
                    let latConvertDiplayStructure = LatitudeDecimalCairoAirport.toFixed(1); // النتيجة هتكون "30.1" كنص
                    let lngConvertDiplayStructure = LongitudeDecimalCairoAirport.toFixed(1); // مثلاً "31.2"
                    L.marker([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], { icon: airportIcon })
                        .addTo(map)
                        .bindPopup(`<b> </b><br>
                                                                                                                                                                                                                                                                                                                                                                                                               data base مطار القاهره من ال   <br> 📍 الإحداثيات: (${latConvertDiplayStructure}, ${lngConvertDiplayStructure})`);

                    map.setView([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], 13);
                }
                else {
                    labelMode = value;
                    var option = labelMode;
                    // حسب الاختيار
                    if (option === "RedSea") {
                        if (document.getElementById('redSea').checked) {
                            fetch('/UQRedSeaMask.json')
                                .then(res => res.json())
                                .then(data => {
                                    redSeaLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'yellow',
                                            color: 'orange',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(redSeaLayer.getBounds());
                                });
                        }
                        else {
                            if (redSeaLayer) {
                                map.removeLayer(redSeaLayer);
                                redSeaLayer = null;
                            }
                        }
                    }

                    if (option === "ElNile") {
                        if (document.getElementById('elNile').checked) {
                            fetch('/UQElNile.json')
                                .then(res => res.json())
                                .then(data => {
                                    nileLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'blue',
                                            color: 'blue',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(nileLayer.getBounds());
                                });
                        }
                        else {
                            if (nileLayer) {
                                map.removeLayer(nileLayer);
                                nileLayer = null;
                            }
                        }
                    }


                    if (option === "MedSea") {
                        if (document.getElementById('mediterranean').checked) {
                            fetch('/UQMedSea.json')
                                .then(res => res.json())
                                .then(data => {
                                    medSeaLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'purple',
                                            color: 'darkblue',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(medSeaLayer.getBounds());
                                });
                        }
                        else {
                            if (medSeaLayer) {
                                map.removeLayer(medSeaLayer);
                                medSeaLayer = null;
                            }
                        }
                    }
                }
            }
            function updatemapFeaturesPopup(labelMode) {
                if (!marker) return;
                labelMode = labelMode;
                const popupContent = createmapfeaturePopupContent(labelMode);
            }
            function updatemapFeaturesCustomized(value) {

                updatemapFeaturesPopup(value); // بعد كل تعديل حدث البوب اب
            }
            function openCustomizedmapFeaturesDropdown() {
                const customizedDiv = document.getElementById('customizedmapFeaturesOptions');
                const isVisible = customizedDiv.style.display === 'block';

                if (isVisible) {
                    // لو مفتوحة، اقفلها
                    customizedDiv.style.display = 'none';
                } else {
                    // لو مقفولة، افتحها
                    customizedDiv.style.display = 'block';
                }

                // تحديث النص ليعكس حالة "Customized"
                labelMode = "Customized";
                document.getElementById("mapFeatureslabelToggle").innerText = `Map: ${value}`;

            }

            // =======-------------------------  Hist Region -------------------------------------------------------------====

        </script>
    }
</body>








                     <!--  Comment #region  -->

@* ================================================== *@


@* 
@using System.Text.Json
@using AreaProject16_6_2025.ViewModel
@{
    ViewData["Title"] = "Controller View";
    ControllerScreenViewModel controllerScreenViewModel =
             (ControllerScreenViewModel)ViewBag.controllerScreenViewModel;
}
<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/styles.css" /> 
</head>
<body>
    <div class="container custom-container">
        <div class="main-card">
            <div class="d-flex gap-2 flex-wrap mb-3">
                <div style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <strong>Area</strong>
                </div>
                <div style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <strong>Controller</strong>
                </div>
                <div id="dateTimeInfo" style="background-color:cadetblue" class="btn-aqua align-content-center">
                    <div id="currentDate"></div>  <div id="currentTime">  </div>  <span id="elapsedTime"></span>
                </div>

                <button id="toggleVelocityButton" class="btn-aqua">VEL</button>
                             <button id="toggleThemeButton" class="btn-aqua">change Theme</button>
                
                <div class="dropdown">
                    <button id="histButton" class="btn-aqua dropdown-toggle" data-bs-toggle="dropdown">
                        HIST:
                    </button>
                    <ul class="dropdown-menu" id="histDropdown">
                        <li><button class="dropdown-item" onclick="selectHist('None')">None</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('1')">1</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('2')">2</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('3')">3</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('4')">4</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('5')">5</button></li>
                        <li><button class="dropdown-item" onclick="selectHist('10')">10</button></li>
                    </ul>
                </div>

                <div class="dropdown">
                    <button id="labelToggle" class="btn-aqua dropdown-toggle">  Label  </button>
                    <ul class="dropdown-menu" id="labelMenu">
                        <li><button class="dropdown-item" onclick="selectlabel('Normal')">Normal</button></li>
                        <li class="dropdown-submenu">
                            <button class="dropdown-item dropdown-toggle" onclick="openCustomizedDropdown()">Customized</button>
                            <ul class="dropdown-menu" id="customizedOptions" style="display: none; padding: 10px;">
                                <li> <input type="checkbox" id="chkSSR" onchange="updateCustomized()"> SSR Code  </li>
                                <li>  <input type="checkbox" id="chkSpeed" onchange="updateCustomized()"> Track Speed  </li>
                                <li> <input type="checkbox" id="chkAltitude" onchange="updateCustomized()"> Track Altitude  </li>
                            </ul>
                        </li>
                    </ul>
                </div>

                <div class="dropdown">
                    <button id="trackButton" class="btn-aqua dropdown-toggle" data-bs-toggle="dropdown">
                        select SC:
                    </button>
                    <ul class="dropdown-menu" id="trackDropdown">
                        <li><button class="dropdown-item" onclick="selectSenario('ScenarioNumber1')">Scenario Number 1</button></li>
                        <li><button class="dropdown-item" onclick="selectSenario('ScenarioNumber2')">Scenario Number 2</button></li>
                    </ul>
                </div>

                <div class="mt-0 d-flex flex-wrap gap-2">
                    <div id="latlongDisplay"
                         style="background-color:cadetblue;position: absolute; "
                         class="btn-aqua align-content-center">
                        Lat:31°8'23"N | Lng:31°21'13"E
                    </div>
                </div>

            </div>

            <div id="map"></div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <p class="mb-1 badge badge-soft">Sign on : <strong>@controllerScreenViewModel.signOnSelection</strong></p>

                <div class="dropdown">
                    <button id="mapFeatureslabelToggle" class="btn btn-aqua dropdown-toggle" type="button"
                            aria-expanded="false">
                        Map Features
                    </button>
                    <ul class="dropdown-menu" id="mapFeatureslabelMenu">
                         <li class="dropdown-item d-flex justify-content-between align-items-center">
                            <span>Cairo TMA</span>
                            <input type="checkbox" id="cairoTMA" onchange="toggleCairoTMA()">
                        </li>

                        <li class="dropdown-submenu">
                            <button class="dropdown-item dropdown-toggle" onclick="openCustomizedmapFeaturesDropdown('feat')">Geographical Features </button>
                            <ul class="dropdown-menu" id="customizedmapFeaturesOptions" style="display: none; padding: 10px;">
                                <li> Red Sea  <input class="form-check-input ms-2" type="checkbox" id="redSea" onchange="updatemapFeaturesCustomized('RedSea')">  </li>
                                <li> Mediterranean <input type="checkbox" id="mediterranean" onchange="updatemapFeaturesCustomized('MedSea')">     </li>
                                <li>  El Nile  <input type="checkbox" id="elNile" onchange="updatemapFeaturesCustomized('ElNile')">   </li>
                            </ul>
                        </li>
                        <li class="dropdown-item d-flex justify-content-between align-items-center">
                            <span>Show FIR (CAIRO)</span>
                            <input type="checkbox" id="firToggle" onchange="toggleFIR()">
                        </li> ">

                        <li class="dropdown-item d-flex justify-content-between align-items-center">
                            <span>Airways</span>
                            <input type="checkbox" id="airways" onchange="toggleAirways()">
                        </li>


                    </ul>
                </div>

                @for (int i = 3; i <= 9; i++)
                {
                    <span class="badge badge-soft">CL @i</span>
                }
            </div>
        </div>
    </div>

    @section Scripts {
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

        <script>
            let map, marker, histMarkers = [], historyMarker = null; let medSeaLayer;
            let redSeaLayer; let airwaysayer; let nileLayer; let showVelocity = false; let lastTracksData;
            let startTime; let labelMode = "Normal"; let elapsedInterval;
            let customizedOptions = { ssr: false, speed: false, altitude: false };
            let customizedmapFeaturesOptions =
                { redsea: false, mediterranean: false, elNile: false };
            var planeMarkers = {}; var trackPaths = {}; var intervalId = null;
            var previousTrackPositions = {}; let checkZoomFirstTime = true;
            let cairoTmaLayer = null; let selectedHistCount = 0; // أو أي قيمة افتراضية حسب عدد النقاط اللي عايز تعرضها
            var latestTransaction; let firLayer;
            let currentTheme = 'light'; let lightTiles, darkTiles;

            document.addEventListener("DOMContentLoaded", () => {
                initializeMap();
                setInterval(updateDateTime, 1000);

                document.getElementById('toggleThemeButton').addEventListener('click', function () {
                    if (currentTheme === 'light') {
                        map.removeLayer(lightTiles);
                        map.addLayer(darkTiles);
                        currentTheme = 'dark';
                    } else {
                        map.removeLayer(darkTiles);
                        map.addLayer(lightTiles);
                        currentTheme = 'light';
                    }
                });

                // باقي الكود هنا...
            });

            // =======------------------------- 0-Initialize Map Region -------------------------------------------------------------====
            function initializeMap() {
                const lat = 30.177, lng = 31.44;

                // تعريف الطبقتين هنا لكن بدون كلمة const
                lightTiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; OpenStreetMap'
                });

                darkTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
                    attribution: '&copy; <a href="https://carto.com/">CartoDB</a>',
                    subdomains: 'abcd',
                    maxZoom: 19
                });

                map = L.map('map', {
                    center: [31.2, 31.4],
                    zoom: 7,
                    layers: [lightTiles]
                });
            }

            // =======------------------------- 1-Data Time Region -------------------------------------------------------------====
            function updateDateTime() {
                const now = new Date();
                document.getElementById("currentDate").textContent = `Date:${now.toISOString().split('T')[0]}`;
                document.getElementById("currentTime").textContent = `UTC:${now.toUTCString().split(' ')[4]}`;
                const elapsedMs = now - startTime; const sec = Math.floor(elapsedMs / 1000) % 60;
                const min = Math.floor(elapsedMs / 1000 / 60);
            }
            function startElapsedTime() {
                elapsedInterval = setInterval(() => {
                    const now = new Date();
                    const elapsedMs = now - startTime;
                    const seconds = Math.floor(elapsedMs / 1000) % 60;
                    const minutes = Math.floor(elapsedMs / 1000 / 60);

                    document.getElementById("elapsedTime").textContent =
                        `Elapsed Time: ${minutes}m ${seconds}s`;
                }, 1000); // كل ثانية
            }

            // =======------------------------- 2-lat lng Region -------------------------------------------------------------====
            function convertToDMS(degree, isLat) {
                const dir = degree >= 0 ? (isLat ? "N" : "E") : (isLat ? "S" : "W");
                const absDeg = Math.abs(degree); const deg = Math.floor(absDeg);
                const minFloat = (absDeg - deg) * 60; const min = Math.floor(minFloat);
                const sec = ((minFloat - min) * 60).toFixed(0);

                return `${deg}°${min}'${sec}"${dir}`;
            }

            // =======------------------------- 3-VEL Region -------------------------------------------------------------====
            function createPlaneIcon(showVel, heading = 0) {
                return L.divIcon({
                    className: 'plane-icon',
                    html: `<div style="transform: rotate(${heading}deg); transform-origin: center;">
                                                                                                                                <svg width="36" height="54">
                                                                                                                                    <circle cx="18" cy="18" r="16.2" stroke="#FF8C00" stroke-width="2" fill="none"/>
                                                                                                                                    <line x1="18" y1="2" x2="18" y2="36" stroke="#FF8C00" stroke-width="2"/>
                                                                                                                                    <line x1="2" y1="18" x2="34" y2="18" stroke="#FF8C00" stroke-width="2"/>
                                                                                                                                    ${showVel ? '<line x1="18" y1="0" x2="18" y2="90" stroke="#FF8C00" stroke-width="2" /><polygon points="16.2,9 19.8,9 18,12" fill="#FF8C00" />' : ''}
                                                                                                                                </svg>
                                                                                                                            </div>`
                });
            }


            // function createPlaneIcon(showVel, heading = 0) {
            //     const rotation = heading % 360;

            //     return L.divIcon({
            //         className: 'plane-icon',
            //         html: `
            //             <div style="transform: rotate(${rotation}deg); transform-origin: center;">
            //                 <svg width="36" height="54">
            //                     <circle cx="18" cy="18" r="16.2" stroke="#FF8C00" stroke-width="2" fill="none"/>
            //                     <line x1="18" y1="2" x2="18" y2="36" stroke="#FF8C00" stroke-width="2"/>
            //                     <line x1="2" y1="18" x2="34" y2="18" stroke="#FF8C00" stroke-width="2"/>
            //                     ${showVel ? '<line x1="18" y1="0" x2="18" y2="90" stroke="#FF8C00" stroke-width="2" /><polygon points="16.2,9 19.8,9 18,12" fill="#FF8C00" />' : ''}
            //                 </svg>
            //             </div>
            //         `
            //     });
            // }

            // function createPlaneIcon(showVel) {
            //     return L.divIcon({
            //         className: 'plane-icon',
            //         html: `<svg width="36" height="54">
            //                                                                                                                                                                                                                                                                                                                                                                                                                 <circle cx="18" cy="18" r="16.2" stroke="#FF8C00" stroke-width="2" fill="none"/>
            //                                                                                                                                                                                                                                                                                                                                                                                                                 <line x1="18" y1="2" x2="18" y2="36" stroke="#FF8C00" stroke-width="2"/>
            //                                                                                                                                                                                                                                                                                                                                                                                                                 <line x1="2" y1="18" x2="34" y2="18" stroke="#FF8C00" stroke-width="2"/>
            //                                                                                                                                                                                                                                                                                                                                                                                                                 ${showVel ? '<line x1="18" y1="0" x2="18" y2="90" stroke="#FF8C00" stroke-width="2" /><polygon points="16.2,9 19.8,9 18,12" fill="#FF8C00" />' : ''}
            //                                                                                                                                                                                                                                                                                                                                                                                                               </svg>`
            //     });
            // }

            // =======------------------------- 4-Hist Region -------------------------------------------------------------====
            function selectHist(value) {
                document.getElementById("histButton").textContent = `HIST: ${value}`;
                selectedHistCount = value === 'None' ? 0 : parseInt(value);
            }
            function renderHistPoints(tracksJson, count) {
                histMarkers.forEach(m => map.removeLayer(m));
                histMarkers = [];

                if (!tracksJson || tracksJson.length === 0 || count === 0) return;

                tracksJson.forEach(track => {
                    if (track.trackTransactions && track.trackTransactions.length > 0) {
                        const transactions = track.trackTransactions;
                        const startIndex = Math.max(0, transactions.length - count);

                        for (let i = startIndex; i < transactions.length; i++) {
                            const tx = transactions[i];
                            const lat = tx.trackLatitude;
                            const lng = tx.trackLongitude;

                            const marker = L.circleMarker([lat, lng], {
                                radius: 3,
                                color: 'red',
                                fillColor: 'red',
                                fillOpacity: 0.8
                            }).addTo(map);
                            histMarkers.push(marker);
                        }
                    }
                });
            }

            // =======------------------------- 5-Label Region -------------------------------------------------------------====
            function selectlabel(value) {
                labelMode = value;
                if (value === 'Normal') {
                    const customizedDivw = document.getElementById('customizedOptions');
                    customizedDivw.style.display = 'none';

                    // الغي تفعيل الـ checkboxes
                    document.getElementById('chkSSR').checked = false;
                    document.getElementById('chkSpeed').checked = false;
                    document.getElementById('chkAltitude').checked = false;

                    // حدث حالة الخيارات
                    customizedOptions = { ssr: false, speed: false, altitude: false };
                }

                // تحديث جميع الـ popups
                Object.entries(planeMarkers).forEach(([id, marker]) => {
                    const track = lastTracksData.find(t => t.Id == id);
                    if (!track || !track.trackTransactions.length) return;

                    const latest = track.trackTransactions[track.trackTransactions.length - 1];
                    const data = {
                        number: track.Id,
                        ssr: (track.Name && track.Name.trim() !== "") ? track.Name : "N/A",
                        speed: latest.trackspeedNew,
                        altitude: latest.trackAltitude,
                        heading: latest.trackHeading
                    };
                    marker.setPopupContent(createPopupContent(labelMode, data));
                    // updatePopup(marker, data);
                });
            }
            function updatePopup(marker, data) {
                const popupContent = createPopupContent(labelMode, data);
                marker.setPopupContent(popupContent);
            }
            function createPopupContent(labelMode, data) {
                if (labelMode === "Customized") {
                    let content = "✈️ ";
                    if (customizedOptions.ssr) {
                        content += `<br>SSR Code: ${data.ssr}`;
                    }
                    if (customizedOptions.speed) {
                        content += `<br>Speed: ${data.speed} knots`;
                    }
                    if (customizedOptions.altitude) {
                        content += `<br>Altitude: ${data.altitude} ft`;
                    }

                    // لو مفيش حاجة متعلم عليها
                    if (!customizedOptions.ssr && !customizedOptions.speed && !customizedOptions.altitude) {
                        content += "<br>No Data Selected.";
                    }

                    return content;
                }

                // لو مش Customized
                switch (labelMode) {
                    case "Normal":
                        return `✈️ طائرة رقم ${data.number}<br> Track SSR = ${data.ssr}<br> Track Altitude: ${data.altitude}
                                                                                                                       <br> Track Speed: ${data.speed} <br> track Heading: ${data.trackHeading}`;

                    case "SSR Code":
                    case "Option 1":
                        return `✈️ SSR Code: ${data.ssr}`;

                    case "Speed":
                    case "Option 2":
                        return `✈️ Speed: ${data.speed}`;

                    case "Altitude":
                    case "Option 3":
                        return `✈️ Altitude: ${data.altitude} ft`;

                    case "Heading":
                    case "Option 4":
                        return `✈️ Heading: ${data.heading}°`;

                    default:
                        return `✈️ طائرة`;
                }
            }
            function buildPopupData(track) {
                const latest = track.trackTransactions[track.trackTransactions.length - 1];
                return {
                    number: track.Id,
                    ssr: track.Name || "N/A",
                    speed: latest.trackspeedNew,
                    altitude: latest.trackAltitude,
                    heading: latest.trackHeading
                };
            }
            function updateCustomized() {
                customizedOptions.ssr = document.getElementById('chkSSR').checked;
                customizedOptions.speed = document.getElementById('chkSpeed').checked;
                customizedOptions.altitude = document.getElementById('chkAltitude').checked;

                // تحديث كل الـ popups بناءً على الإعدادات الجديدة
                Object.entries(planeMarkers).forEach(([id, marker]) => {
                    const track = lastTracksData?.find(t => t.Id == id);
                    if (!track || !track.trackTransactions.length) return;

                    const latest = track.trackTransactions[track.trackTransactions.length - 1];
                    const data = {
                        number: track.Id,
                        ssr: track.Name || "N/A",
                        speed: latest.trackspeedNew,
                        altitude: latest.altitude,
                        heading: latest.trackLongitude
                        // heading: heading

                    };
                    updatePopup(marker, data);
                });
            }
            function toggleCustomized() {
                const customizedDiv = document.getElementById('customizedOptions');
                if (customizedDiv.style.display === 'none') {
                    customizedDiv.style.display = 'block';
                } else {
                    customizedDiv.style.display = 'none';
                }
                labelMode = "Customized";
            }
            function openCustomizedDropdown() {
                const customizedDiv = document.getElementById('customizedOptions');
                if (customizedDiv.style.display === 'none') {
                    customizedDiv.style.display = 'block';
                }
                const dropdownMenu = document.getElementById('labelToggle').nextElementSibling;  // تحديد الـ dropdown التابع للـ Label
                const bootstrapDropdown = new bootstrap.Dropdown(dropdownMenu);
                bootstrapDropdown.show();
                labelMode = "Customized";
            }

            // =======------------------------- 6-Choose Scenario Region -------------------------------------------------------------====
            function selectSenario(value) {
                document.getElementById("trackButton").textContent = `${value}`;
                if (intervalId) {
                    clearInterval(intervalId);
                    intervalId = null;
                }

                if (value === 'None') {
                    // ممكن تمسح كل الماركرات من الخريطة هنا كمان
                    Object.values(planeMarkers).forEach(marker => map.removeLayer(marker));
                    Object.values(trackPaths).forEach(pathArray => pathArray.forEach(m => map.removeLayer(m)));
                    planeMarkers = {};
                    trackPaths = {};
                    return;
                }

                if (value === 'ScenarioNumber1') {
                    startTime = new Date();
                    function updateTrackTransactions() {
                        fetch('/api/tracksApiJson/latest')
                            .then(response => response.json())
                            .then(tracksJson => {
                                lastTracksData = tracksJson; // استخدمه لاحقًا لتحديث البوب أب

                                tracksJson.forEach(track => {
                                    // console.log(`🛩️ Track ID: ${track.Id}`, track.trackTransactions.map(t => [t.trackLatitude, t.trackLongitude]));

                                    if (track.trackTransactions && track.trackTransactions.length > 0) {
                                        var transactions = track.trackTransactions;
                                        latestTransaction = transactions[transactions.length - 1];

                                        let heading = latestTransaction.trackHeading; // default if no previous data

                                        const prev = previousTrackPositions[track.Id];
                                        if (prev) {
                                            heading = calculateHeading(prev.lat, prev.lng, latestTransaction.trackLatitude, latestTransaction.trackLongitude);
                                        }

                                        // حدث الموقع السابق
                                        previousTrackPositions[track.Id] = {
                                            lat: latestTransaction.trackLatitude,
                                            lng: latestTransaction.trackLongitude
                                        };


                                        if (trackPaths[track.Id]) {
                                            trackPaths[track.Id].forEach(marker => map.removeLayer(marker));
                                        }
                                        trackPaths[track.Id] = [];

                                        if (planeMarkers[track.Id]) {
                                            planeMarkers[track.Id].setLatLng([latestTransaction.trackLatitude, latestTransaction.trackLongitude]);

                                            const data = {
                                                number: track.Id,
                                                ssr: track.Name || "N/A",
                                                speed: latestTransaction.trackspeedNew,
                                                altitude: latestTransaction.altitude,
                                                heading: latestTransaction.trackLongitude
                                            };
                                            const popupContent = createPopupContent(labelMode, data);
                                            planeMarkers[track.Id].setPopupContent(popupContent); // ✅ تحديث المحتوى هنا
                                        }

                                        else {
                                            // var planeIcon = createPlaneIcon(showVelocity);
                                            var planeIcon = createPlaneIcon(showVelocity, heading);

                                            const data = {
                                                number: track.Id,
                                                ssr: track.Name || "N/A",
                                                speed: latestTransaction.trackspeedNew,
                                                altitude: latestTransaction.trackAltitude,
                                                heading: latestTransaction.trackHeading
                                            };
                                            const popupContent = createPopupContent(labelMode, data);

                                            var planeMarker = L.marker([latestTransaction.trackLatitude, latestTransaction.trackLongitude], { icon: planeIcon })
                                                .addTo(map)
                                                .bindPopup(popupContent);

                                            planeMarkers[track.Id] = planeMarker;

                                        }
                                    } else {
                                        console.log(`❌ لا توجد بيانات لحركة الطائرة للمسار: ${track.Id}`);
                                    }
                                });
                                if (checkZoomFirstTime) {

                                    let firstTrackLat = tracksJson[0].trackTransactions[0].trackLatitude,
                                        firstTrackLng = tracksJson[0].trackTransactions[0].trackLongitude;
                                    map.setView([firstTrackLat, firstTrackLng], 13);
                                    checkZoomFirstTime = false;
                                }
                                startElapsedTime();
                                renderHistPoints(tracksJson, selectedHistCount);


                            })
                            .catch(error => console.error("❌ خطأ في تحميل بيانات المسارات:", error));
                    }

                    intervalId = setInterval(updateTrackTransactions, 1000);
                    updateTrackTransactions();
                }
                if (value === 'ScenarioNumber2') {
                    startTime = new Date(); // كررها في بداية سيناريو جديد
                    // ممكن تمسح كل الماركرات من الخريطة هنا كمان
                    Object.values(planeMarkers).forEach(marker => map.removeLayer(marker));
                    Object.values(trackPaths).forEach(pathArray => pathArray.forEach(m => map.removeLayer(m)));
                    planeMarkers = {};
                    trackPaths = {};
                    return;
                }

            }

            // =======------------------------- 7-Map Features Region -------------------------------------------------------------====
            function selectmapFeatureslabel(value) {
                labelMode = value;
                // document.getElementById("mapFeatureslabelToggle").innerText = `Map: ${value}`;
                document.getElementById("mapFeatureslabelToggle").innerText = `Map: `;

                if (labelMode === 'CairoTMA') {
                    var LatitudeDecimalCairoAirport = @JsonSerializer.Serialize(30.114);
                    var LongitudeDecimalCairoAirport = @JsonSerializer.Serialize(31.44);
                    var airportIcon = L.icon({
                        iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                        iconSize: [20, 20], // تم تقليل الحجم من 32x32 إلى 20x20
                        iconAnchor: [10, 10] // يفضل ضبط الـ anchor ليكون في منتصف الأيقونة الجديدة
                    });

                    // var airportIcon = L.icon({
                    //     iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                    //     iconSize: [32, 32],
                    //     iconAnchor: [16, 16]
                    // });
                    let latConvertDiplayStructure = LatitudeDecimalCairoAirport.toFixed(1); // النتيجة هتكون "30.1" كنص
                    let lngConvertDiplayStructure = LongitudeDecimalCairoAirport.toFixed(1); // مثلاً "31.2"

                    L.marker([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], { icon: airportIcon })
                        .addTo(map)
                        .bindPopup(`<b> </b>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   data base مطار القاهره من ال   <br> 📍 الإحداثيات: (${latConvertDiplayStructure}, ${lngConvertDiplayStructure})`);
                    map.setView([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], 13);
                }

                else {
                    updatemapFeaturesPopup();
                }
            }
            function createmapfeaturePopupContent(labelMode) {
                let value = labelMode;
                if (value === "CairoTMA") {

                    var LatitudeDecimalCairoAirport = @JsonSerializer.Serialize(@controllerScreenViewModel.LatitudeCairoDecimal);
                    var LongitudeDecimalCairoAirport = @JsonSerializer.Serialize(@controllerScreenViewModel.LongitudeCairoDecimal);

                    var airportIcon = L.icon({
                        iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                        iconSize: [32, 32],
                        iconAnchor: [16, 16]
                    });
                    let latConvertDiplayStructure = LatitudeDecimalCairoAirport.toFixed(1); // النتيجة هتكون "30.1" كنص
                    let lngConvertDiplayStructure = LongitudeDecimalCairoAirport.toFixed(1); // مثلاً "31.2"
                    L.marker([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], { icon: airportIcon })
                        .addTo(map)
                        .bindPopup(`<b> </b><br>
data base مطار القاهره من ال   <br> 📍 الإحداثيات: (${latConvertDiplayStructure}, ${lngConvertDiplayStructure})`);

                    map.setView([LatitudeDecimalCairoAirport, LongitudeDecimalCairoAirport], 13);
                }
                else {
                    labelMode = value;
                    var option = labelMode;
                    // حسب الاختيار
                    if (option === "RedSea") {
                        if (document.getElementById('redSea').checked) {
                            fetch('/UQRedSeaMask.json')
                                .then(res => res.json())
                                .then(data => {
                                    redSeaLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'yellow',
                                            color: 'orange',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(redSeaLayer.getBounds());
                                });
                        }
                        else {
                            if (redSeaLayer) {
                                map.removeLayer(redSeaLayer);
                                redSeaLayer = null;
                            }
                        }
                    }

                    if (option === "ElNile") {
                        if (document.getElementById('elNile').checked) {
                            fetch('/UQElNile.json')
                                .then(res => res.json())
                                .then(data => {
                                    nileLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'blue',
                                            color: 'blue',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(nileLayer.getBounds());
                                });
                        }
                        else {
                            if (nileLayer) {
                                map.removeLayer(nileLayer);
                                nileLayer = null;
                            }
                        }
                    }


                    if (option === "MedSea") {
                        if (document.getElementById('mediterranean').checked) {
                            fetch('/UQMedSea.json')
                                .then(res => res.json())
                                .then(data => {
                                    medSeaLayer = L.geoJSON(data, {
                                        style: {
                                            fillColor: 'purple',
                                            color: 'darkblue',
                                            weight: 1,
                                            opacity: 1,
                                            fillOpacity: 0.5
                                        }
                                    }).addTo(map);
                                    map.fitBounds(medSeaLayer.getBounds());
                                });
                        }
                        else {
                            if (medSeaLayer) {
                                map.removeLayer(medSeaLayer);
                                medSeaLayer = null;
                            }
                        }
                    }
                }
            }
            function updatemapFeaturesPopup(labelMode) {
                // if (!marker) return;
                labelMode = labelMode;
                const popupContent = createmapfeaturePopupContent(labelMode);
            }
            function updatemapFeaturesCustomized(value) {

                updatemapFeaturesPopup(value); // بعد كل تعديل حدث البوب اب
            }
            function openCustomizedmapFeaturesDropdown() {
                const customizedDiv = document.getElementById('customizedmapFeaturesOptions');
                const isVisible = customizedDiv.style.display === 'block';

                if (isVisible) {
                    // لو مفتوحة، اقفلها
                    customizedDiv.style.display = 'none';
                } else {
                    // لو مقفولة، افتحها
                    customizedDiv.style.display = 'block';
                }

                // تحديث النص ليعكس حالة "Customized"
                labelMode = "Customized";
                // document.getElementById("mapFeatureslabelToggle").innerText = `Map: ${value}`;
                document.getElementById("mapFeatureslabelToggle").innerText = `Map: Features`;

            }

            function toggleCairoTMA() {
                const isChecked = document.getElementById('cairoTMA').checked;

                if (isChecked) {
                    const lat = 30.114;
                    const lng = 31.44;

                    const airportIcon = L.icon({
                        iconUrl: 'https://www.svgrepo.com/show/500079/airport.svg',
                        iconSize: [32, 32],
                        iconAnchor: [16, 16]
                    });

                    cairoTmaLayer = L.marker([lat, lng], { icon: airportIcon })
                        .addTo(map)
                        .bindPopup(`<b>📍 Cairo Airport</b><br>Latitude: ${lat.toFixed(1)}, Longitude: ${lng.toFixed(1)}`);

                    map.setView([lat, lng], 13);
                } else {
                    if (cairoTmaLayer) {
                        map.removeLayer(cairoTmaLayer);
                        cairoTmaLayer = null;
                    }
                }
            }

            function toggleFIR() {
                const isChecked = document.getElementById('firToggle').checked;

                if (isChecked) {
                    fetch('/UQFIRMask.json')
                        .then(res => res.json())
                        .then(data => {
                            firLayer = L.geoJSON(data, {
                                filter: function (feature) {
                                    // تأكد أننا نرسم فقط منطقة FIR الخاصة بالقاهرة
                                    return feature.properties && (
                                        feature.properties.name?.toUpperCase().includes('CAIRO') ||
                                        feature.properties.id?.toUpperCase().includes('HECC')
                                    );
                                },
                                style: {
                                    color: 'red',
                                    weight: 2,
                                    fillOpacity: 0
                                }
                            }).addTo(map);

                            map.fitBounds(firLayer.getBounds());
                        });
                } else {
                    if (firLayer) {
                        map.removeLayer(firLayer);
                        firLayer = null;
                    }
                }
            }


            function toggleAirways() {
                const isChecked = document.getElementById('airways').checked;

                if (isChecked) {
                    // fetch('/UQairwaysMask.json')
                    //         .then(res => res.json())
                    //         .then(data => {
                    //         airwaysayer = L.geoJSON(data, {
                    //                 style: {
                    //                     fillColor: 'yellow',
                    //                     color: 'orange',
                    //                     weight: 1,
                    //                     opacity: 1,
                    //                     fillOpacity: 0.5
                    //                 }
                    //             }).addTo(map);
                    //         map.fitBounds(airwaysayer.getBounds());
                    //         });


                    // تحميل بيانات الـ Airways بصيغة GeoJSON
                    fetch('UQairwaysMask.geojson')
                        .then(response => response.json())
                        .then(data => {
                            // إنشاء طبقة GeoJSON وإضافتها إلى الخريطة
                            L.geoJSON(data, {
                                style: function (feature) {
                                    return { color: 'blue', weight: 2 };
                                }
                            }).addTo(map);
                        });

                }
                else {
                    if (airwaysayer) {
                        map.removeLayer(airwaysayer);
                        airwaysayer = null;
                    }
                }
            }

            // =======-------------------------  calculate Heading Region -------------------------------------------------------------====
            function calculateHeading(lat1, lon1, lat2, lon2) {
                var dLon = (lon2 - lon1) * Math.PI / 180;
                lat1 = lat1 * Math.PI / 180;
                lat2 = lat2 * Math.PI / 180;

                var y = Math.sin(dLon) * Math.cos(lat2);
                var x = Math.cos(lat1) * Math.sin(lat2) -
                    Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);
                var brng = Math.atan2(y, x) * 180 / Math.PI;
                return (brng + 360) % 360; // لضمان القيمة من 0 إلى 360
            }







            // =======-------------------------  Hist Region -------------------------------------------------------------====
        </script>
    }
</body>


 *@


<!-- #endregion -->